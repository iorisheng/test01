def simplify(expression):
    # 去除空格
    # expression = expression.replace(' ', '')

    # 递归结束条件，表达式中没有括号
    if '(' not in expression:
        return expression

    # 找到最内层括号中的内容
    innermost = ''
    depth = 0
    for i in range(len(expression)):
        if expression[i] == '(':
            depth += 1
        elif expression[i] == ')':
            depth -= 1
            if depth == 0:
                innermost = expression[expression.index('(') + 1:i]
                break

    # 简化最内层括号中的内容
    simplified_innermost = simplify(innermost)

    # 将简化后的内容替换回原表达式
    expression = expression.replace('(' + innermost + ')', simplified_innermost)

    # 处理 or 运算符
    parts = expression.split('or')
    if len(parts) > 1:
        result_parts = []
        for part in parts:
            result_part = simplify(part)
            result_parts.append(result_part)
        return ' or '.join(result_parts)

    # 处理 and 运算符
    parts = expression.split('and')
    if len(parts) > 1:
        result_parts = []
        for part in parts:
            result_part = simplify(part)
            result_parts.append(result_part)
        return ' and '.join(result_parts)

    # 递归结束条件，表达式中没有括号且没有 or 或 and 运算符
    return expression


query1 = "(col1=val1) or (col2=val2 and col3=val3)"
query2 = "(col1=val1) and (col2=val2 or col3=val3) and (col4=val4)"
query3 = "(col1=val1 and col1=val2) and (col3=val3 or col3=val4)"
query4 = "(col1=val1 or col2=val2) and (col3=val3 or col4=val4)"

print(simplify(query1)) # 输出：col1=val1 or col2=val2 and col3=val3
print(simplify(query2))
print(simplify(query3))
print(simplify(query4))

query5 = "(col1=val1 and col4=val4) or (col2=val2 and col3=val3)"
print(simplify(query5))

query6 = "(col1=val1 and col5=val5) and (col3=val3 or col4=val4 or col6=val6)"
print(simplify(query6))
